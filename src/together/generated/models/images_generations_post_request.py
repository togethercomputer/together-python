# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from together.generated.models.images_generations_post_request_image_loras_inner import (
    ImagesGenerationsPostRequestImageLorasInner,
)
from together.generated.models.images_generations_post_request_model import (
    ImagesGenerationsPostRequestModel,
)
from typing import Optional, Set
from typing_extensions import Self


class ImagesGenerationsPostRequest(BaseModel):
    """
    ImagesGenerationsPostRequest
    """  # noqa: E501

    prompt: StrictStr = Field(
        description="A description of the desired images. Maximum length varies by model."
    )
    model: ImagesGenerationsPostRequestModel
    steps: Optional[StrictInt] = Field(
        default=20, description="Number of generation steps."
    )
    image_url: Optional[StrictStr] = Field(
        default=None,
        description="URL of an image to use for image models that support it.",
    )
    seed: Optional[StrictInt] = Field(
        default=None,
        description="Seed used for generation. Can be used to reproduce image generations.",
    )
    n: Optional[StrictInt] = Field(
        default=1, description="Number of image results to generate."
    )
    height: Optional[StrictInt] = Field(
        default=1024, description="Height of the image to generate in number of pixels."
    )
    width: Optional[StrictInt] = Field(
        default=1024, description="Width of the image to generate in number of pixels."
    )
    negative_prompt: Optional[StrictStr] = Field(
        default=None,
        description="The prompt or prompts not to guide the image generation.",
    )
    response_format: Optional[StrictStr] = Field(
        default=None,
        description="Format of the image response. Can be either a base64 string or a URL.",
    )
    guidance: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=3.5,
        description="Adjusts the alignment of the generated image with the input prompt. Higher values (e.g., 8-10) make the output more faithful to the prompt, while lower values (e.g., 1-5) encourage more creative freedom.",
    )
    output_format: Optional[StrictStr] = Field(
        default="jpeg",
        description="The format of the image response. Can be either be `jpeg` or `png`. Defaults to `jpeg`.",
    )
    image_loras: Optional[List[ImagesGenerationsPostRequestImageLorasInner]] = Field(
        default=None,
        description="An array of objects that define LoRAs (Low-Rank Adaptations) to influence the generated image.",
    )
    __properties: ClassVar[List[str]] = [
        "prompt",
        "model",
        "steps",
        "image_url",
        "seed",
        "n",
        "height",
        "width",
        "negative_prompt",
        "response_format",
        "guidance",
        "output_format",
        "image_loras",
    ]

    @field_validator("response_format")
    def response_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["base64", "url"]):
            raise ValueError("must be one of enum values ('base64', 'url')")
        return value

    @field_validator("output_format")
    def output_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["jpeg", "png"]):
            raise ValueError("must be one of enum values ('jpeg', 'png')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImagesGenerationsPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_loras (list)
        _items = []
        if self.image_loras:
            for _item_image_loras in self.image_loras:
                if _item_image_loras:
                    _items.append(_item_image_loras.to_dict())
            _dict["image_loras"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImagesGenerationsPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "prompt": obj.get("prompt"),
                "model": (
                    ImagesGenerationsPostRequestModel.from_dict(obj["model"])
                    if obj.get("model") is not None
                    else None
                ),
                "steps": obj.get("steps") if obj.get("steps") is not None else 20,
                "image_url": obj.get("image_url"),
                "seed": obj.get("seed"),
                "n": obj.get("n") if obj.get("n") is not None else 1,
                "height": obj.get("height") if obj.get("height") is not None else 1024,
                "width": obj.get("width") if obj.get("width") is not None else 1024,
                "negative_prompt": obj.get("negative_prompt"),
                "response_format": obj.get("response_format"),
                "guidance": (
                    obj.get("guidance") if obj.get("guidance") is not None else 3.5
                ),
                "output_format": (
                    obj.get("output_format")
                    if obj.get("output_format") is not None
                    else "jpeg"
                ),
                "image_loras": (
                    [
                        ImagesGenerationsPostRequestImageLorasInner.from_dict(_item)
                        for _item in obj["image_loras"]
                    ]
                    if obj.get("image_loras") is not None
                    else None
                ),
            }
        )
        return _obj
