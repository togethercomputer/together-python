# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from together.generated.models.finetune_event_levels import FinetuneEventLevels
from together.generated.models.finetune_event_type import FinetuneEventType
from typing import Optional, Set
from typing_extensions import Self


class FineTuneEvent(BaseModel):
    """
    FineTuneEvent
    """  # noqa: E501

    object: StrictStr
    created_at: StrictStr
    level: Optional[FinetuneEventLevels] = None
    message: StrictStr
    type: FinetuneEventType
    param_count: StrictInt
    token_count: StrictInt
    total_steps: StrictInt
    wandb_url: StrictStr
    step: StrictInt
    checkpoint_path: StrictStr
    model_path: StrictStr
    training_offset: StrictInt
    hash: StrictStr
    __properties: ClassVar[List[str]] = [
        "object",
        "created_at",
        "level",
        "message",
        "type",
        "param_count",
        "token_count",
        "total_steps",
        "wandb_url",
        "step",
        "checkpoint_path",
        "model_path",
        "training_offset",
        "hash",
    ]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["fine-tune-event"]):
            raise ValueError("must be one of enum values ('fine-tune-event')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FineTuneEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FineTuneEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "created_at": obj.get("created_at"),
                "level": obj.get("level"),
                "message": obj.get("message"),
                "type": obj.get("type"),
                "param_count": obj.get("param_count"),
                "token_count": obj.get("token_count"),
                "total_steps": obj.get("total_steps"),
                "wandb_url": obj.get("wandb_url"),
                "step": obj.get("step"),
                "checkpoint_path": obj.get("checkpoint_path"),
                "model_path": obj.get("model_path"),
                "training_offset": obj.get("training_offset"),
                "hash": obj.get("hash"),
            }
        )
        return _obj
