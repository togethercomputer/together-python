# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from together.generated.models.completion_choice import CompletionChoice
from together.generated.models.completion_chunk_usage import CompletionChunkUsage
from together.generated.models.completion_token import CompletionToken
from typing import Optional, Set
from typing_extensions import Self


class CompletionChunk(BaseModel):
    """
    CompletionChunk
    """  # noqa: E501

    id: StrictStr
    token: CompletionToken
    choices: List[CompletionChoice]
    usage: CompletionChunkUsage
    seed: Optional[StrictInt] = None
    finish_reason: Any
    __properties: ClassVar[List[str]] = [
        "id",
        "token",
        "choices",
        "usage",
        "seed",
        "finish_reason",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletionChunk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict["token"] = self.token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in choices (list)
        _items = []
        if self.choices:
            for _item_choices in self.choices:
                if _item_choices:
                    _items.append(_item_choices.to_dict())
            _dict["choices"] = _items
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict["usage"] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finish_reason
        if self.finish_reason:
            _dict["finish_reason"] = self.finish_reason.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletionChunk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "token": (
                    CompletionToken.from_dict(obj["token"])
                    if obj.get("token") is not None
                    else None
                ),
                "choices": (
                    [CompletionChoice.from_dict(_item) for _item in obj["choices"]]
                    if obj.get("choices") is not None
                    else None
                ),
                "usage": (
                    CompletionChunkUsage.from_dict(obj["usage"])
                    if obj.get("usage") is not None
                    else None
                ),
                "seed": obj.get("seed"),
                "finish_reason": (
                    FinishReason.from_dict(obj["finish_reason"])
                    if obj.get("finish_reason") is not None
                    else None
                ),
            }
        )
        return _obj
