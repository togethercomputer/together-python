# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from together.generated.models.completion_request_model import CompletionRequestModel
from together.generated.models.completion_request_safety_model import (
    CompletionRequestSafetyModel,
)
from typing import Optional, Set
from typing_extensions import Self


class CompletionRequest(BaseModel):
    """
    CompletionRequest
    """  # noqa: E501

    prompt: StrictStr = Field(
        description="A string providing context for the model to complete."
    )
    model: CompletionRequestModel
    max_tokens: Optional[StrictInt] = Field(
        default=None, description="The maximum number of tokens to generate."
    )
    stop: Optional[List[StrictStr]] = Field(
        default=None,
        description='A list of string sequences that will truncate (stop) inference text output. For example, "</s>" will stop generation as soon as the model generates the given token.',
    )
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A decimal number from 0-1 that determines the degree of randomness in the response. A temperature less than 1 favors more correctness and is appropriate for question answering or summarization. A value closer to 1 introduces more randomness in the output.",
    )
    top_p: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A percentage (also called the nucleus parameter) that's used to dynamically adjust the number of choices for each predicted token based on the cumulative probabilities. It specifies a probability threshold below which all less likely tokens are filtered out. This technique helps maintain diversity and generate more fluent and natural-sounding text.",
    )
    top_k: Optional[StrictInt] = Field(
        default=None,
        description="An integer that's used to limit the number of choices for the next predicted word or token. It specifies the maximum number of tokens to consider at each step, based on their probability of occurrence. This technique helps to speed up the generation process and can improve the quality of the generated text by focusing on the most likely options.",
    )
    repetition_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A number that controls the diversity of generated text by reducing the likelihood of repeated sequences. Higher values decrease repetition.",
    )
    stream: Optional[StrictBool] = Field(
        default=None,
        description="If true, stream tokens as Server-Sent Events as the model generates them instead of waiting for the full model response. The stream terminates with `data: [DONE]`. If false, return a single JSON object containing the results.",
    )
    logprobs: Optional[Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(
        default=None,
        description="Determines the number of most likely tokens to return at each token position log probabilities to return.",
    )
    echo: Optional[StrictBool] = Field(
        default=None,
        description="If true, the response will contain the prompt. Can be used with `logprobs` to return prompt logprobs.",
    )
    n: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(
        default=None,
        description="The number of completions to generate for each prompt.",
    )
    safety_model: Optional[CompletionRequestSafetyModel] = None
    min_p: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A number between 0 and 1 that can be used as an alternative to top-p and top-k.",
    )
    presence_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A number between -2.0 and 2.0 where a positive value increases the likelihood of a model talking about new topics.",
    )
    frequency_penalty: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="A number between -2.0 and 2.0 where a positive value decreases the likelihood of repeating tokens that have already been mentioned.",
    )
    logit_bias: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(
        default=None,
        description="Adjusts the likelihood of specific tokens appearing in the generated output.",
    )
    seed: Optional[StrictInt] = Field(
        default=None, description="Seed value for reproducibility."
    )
    __properties: ClassVar[List[str]] = [
        "prompt",
        "model",
        "max_tokens",
        "stop",
        "temperature",
        "top_p",
        "top_k",
        "repetition_penalty",
        "stream",
        "logprobs",
        "echo",
        "n",
        "safety_model",
        "min_p",
        "presence_penalty",
        "frequency_penalty",
        "logit_bias",
        "seed",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of safety_model
        if self.safety_model:
            _dict["safety_model"] = self.safety_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "prompt": obj.get("prompt"),
                "model": (
                    CompletionRequestModel.from_dict(obj["model"])
                    if obj.get("model") is not None
                    else None
                ),
                "max_tokens": obj.get("max_tokens"),
                "stop": obj.get("stop"),
                "temperature": obj.get("temperature"),
                "top_p": obj.get("top_p"),
                "top_k": obj.get("top_k"),
                "repetition_penalty": obj.get("repetition_penalty"),
                "stream": obj.get("stream"),
                "logprobs": obj.get("logprobs"),
                "echo": obj.get("echo"),
                "n": obj.get("n"),
                "safety_model": (
                    CompletionRequestSafetyModel.from_dict(obj["safety_model"])
                    if obj.get("safety_model") is not None
                    else None
                ),
                "min_p": obj.get("min_p"),
                "presence_penalty": obj.get("presence_penalty"),
                "frequency_penalty": obj.get("frequency_penalty"),
                "logit_bias": obj.get("logit_bias"),
                "seed": obj.get("seed"),
            }
        )
        return _obj
