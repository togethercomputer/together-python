# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from together.generated.models.pricing import Pricing
from typing import Optional, Set
from typing_extensions import Self


class ModelInfo(BaseModel):
    """
    ModelInfo
    """  # noqa: E501

    id: StrictStr
    object: StrictStr
    created: StrictInt
    type: StrictStr
    display_name: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    link: Optional[StrictStr] = None
    license: Optional[StrictStr] = None
    context_length: Optional[StrictInt] = None
    pricing: Optional[Pricing] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "object",
        "created",
        "type",
        "display_name",
        "organization",
        "link",
        "license",
        "context_length",
        "pricing",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            ["chat", "language", "code", "image", "embedding", "moderation", "rerank"]
        ):
            raise ValueError(
                "must be one of enum values ('chat', 'language', 'code', 'image', 'embedding', 'moderation', 'rerank')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict["pricing"] = self.pricing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "object": obj.get("object"),
                "created": obj.get("created"),
                "type": obj.get("type"),
                "display_name": obj.get("display_name"),
                "organization": obj.get("organization"),
                "link": obj.get("link"),
                "license": obj.get("license"),
                "context_length": obj.get("context_length"),
                "pricing": (
                    Pricing.from_dict(obj["pricing"])
                    if obj.get("pricing") is not None
                    else None
                ),
            }
        )
        return _obj
