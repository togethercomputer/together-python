# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from together.generated.models.rerank_request_documents import RerankRequestDocuments
from together.generated.models.rerank_request_model import RerankRequestModel
from typing import Optional, Set
from typing_extensions import Self


class RerankRequest(BaseModel):
    """
    RerankRequest
    """  # noqa: E501

    model: RerankRequestModel
    query: StrictStr = Field(description="The search query to be used for ranking.")
    documents: RerankRequestDocuments
    top_n: Optional[StrictInt] = Field(
        default=None, description="The number of top results to return."
    )
    return_documents: Optional[StrictBool] = Field(
        default=None,
        description="Whether to return supplied documents with the response.",
    )
    rank_fields: Optional[List[StrictStr]] = Field(
        default=None,
        description="List of keys in the JSON Object document to rank by. Defaults to use all supplied keys for ranking.",
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "model",
        "query",
        "documents",
        "top_n",
        "return_documents",
        "rank_fields",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RerankRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict["model"] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documents
        if self.documents:
            _dict["documents"] = self.documents.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RerankRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "model": (
                    RerankRequestModel.from_dict(obj["model"])
                    if obj.get("model") is not None
                    else None
                ),
                "query": obj.get("query"),
                "documents": (
                    RerankRequestDocuments.from_dict(obj["documents"])
                    if obj.get("documents") is not None
                    else None
                ),
                "top_n": obj.get("top_n"),
                "return_documents": obj.get("return_documents"),
                "rank_fields": obj.get("rank_fields"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
