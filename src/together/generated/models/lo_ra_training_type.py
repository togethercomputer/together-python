# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import (
    BaseModel,
    ConfigDict,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class LoRATrainingType(BaseModel):
    """
    LoRATrainingType
    """  # noqa: E501

    type: StrictStr
    lora_r: StrictInt
    lora_alpha: StrictInt
    lora_dropout: Optional[Union[StrictFloat, StrictInt]] = 0.0
    lora_trainable_modules: Optional[StrictStr] = "all-linear"
    __properties: ClassVar[List[str]] = [
        "type",
        "lora_r",
        "lora_alpha",
        "lora_dropout",
        "lora_trainable_modules",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["Lora"]):
            raise ValueError("must be one of enum values ('Lora')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoRATrainingType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoRATrainingType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "lora_r": obj.get("lora_r"),
                "lora_alpha": obj.get("lora_alpha"),
                "lora_dropout": (
                    obj.get("lora_dropout")
                    if obj.get("lora_dropout") is not None
                    else 0.0
                ),
                "lora_trainable_modules": (
                    obj.get("lora_trainable_modules")
                    if obj.get("lora_trainable_modules") is not None
                    else "all-linear"
                ),
            }
        )
        return _obj
