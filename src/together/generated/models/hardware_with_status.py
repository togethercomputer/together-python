# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from together.generated.models.endpoint_pricing import EndpointPricing
from together.generated.models.hardware_availability import HardwareAvailability
from together.generated.models.hardware_spec import HardwareSpec
from typing import Optional, Set
from typing_extensions import Self


class HardwareWithStatus(BaseModel):
    """
    Hardware configuration details with optional availability status
    """  # noqa: E501

    object: StrictStr
    id: StrictStr = Field(
        description="Unique identifier for the hardware configuration"
    )
    pricing: EndpointPricing
    specs: HardwareSpec
    availability: Optional[HardwareAvailability] = None
    updated_at: datetime = Field(
        description="Timestamp of when the hardware status was last updated"
    )
    __properties: ClassVar[List[str]] = [
        "object",
        "id",
        "pricing",
        "specs",
        "availability",
        "updated_at",
    ]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["hardware"]):
            raise ValueError("must be one of enum values ('hardware')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HardwareWithStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict["pricing"] = self.pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specs
        if self.specs:
            _dict["specs"] = self.specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availability
        if self.availability:
            _dict["availability"] = self.availability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HardwareWithStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "id": obj.get("id"),
                "pricing": (
                    EndpointPricing.from_dict(obj["pricing"])
                    if obj.get("pricing") is not None
                    else None
                ),
                "specs": (
                    HardwareSpec.from_dict(obj["specs"])
                    if obj.get("specs") is not None
                    else None
                ),
                "availability": (
                    HardwareAvailability.from_dict(obj["availability"])
                    if obj.get("availability") is not None
                    else None
                ),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
