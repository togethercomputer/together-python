# coding: utf-8

"""
    Together APIs

    The Together REST API. Please see https://docs.together.ai for more details.

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from together.generated.models.autoscaling import Autoscaling
from typing import Optional, Set
from typing_extensions import Self


class DedicatedEndpoint(BaseModel):
    """
    Details about a dedicated endpoint deployment
    """  # noqa: E501

    object: StrictStr = Field(description="The type of object")
    id: StrictStr = Field(description="Unique identifier for the endpoint")
    name: StrictStr = Field(description="System name for the endpoint")
    display_name: StrictStr = Field(description="Human-readable name for the endpoint")
    model: StrictStr = Field(description="The model deployed on this endpoint")
    hardware: StrictStr = Field(
        description="The hardware configuration used for this endpoint"
    )
    type: StrictStr = Field(description="The type of endpoint")
    owner: StrictStr = Field(description="The owner of this endpoint")
    state: StrictStr = Field(description="Current state of the endpoint")
    autoscaling: Autoscaling = Field(
        description="Configuration for automatic scaling of the endpoint"
    )
    created_at: datetime = Field(description="Timestamp when the endpoint was created")
    __properties: ClassVar[List[str]] = [
        "object",
        "id",
        "name",
        "display_name",
        "model",
        "hardware",
        "type",
        "owner",
        "state",
        "autoscaling",
        "created_at",
    ]

    @field_validator("object")
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["endpoint"]):
            raise ValueError("must be one of enum values ('endpoint')")
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["dedicated"]):
            raise ValueError("must be one of enum values ('dedicated')")
        return value

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            ["PENDING", "STARTING", "STARTED", "STOPPING", "STOPPED", "ERROR"]
        ):
            raise ValueError(
                "must be one of enum values ('PENDING', 'STARTING', 'STARTED', 'STOPPING', 'STOPPED', 'ERROR')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DedicatedEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaling
        if self.autoscaling:
            _dict["autoscaling"] = self.autoscaling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DedicatedEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "object": obj.get("object"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "display_name": obj.get("display_name"),
                "model": obj.get("model"),
                "hardware": obj.get("hardware"),
                "type": obj.get("type"),
                "owner": obj.get("owner"),
                "state": obj.get("state"),
                "autoscaling": (
                    Autoscaling.from_dict(obj["autoscaling"])
                    if obj.get("autoscaling") is not None
                    else None
                ),
                "created_at": obj.get("created_at"),
            }
        )
        return _obj
